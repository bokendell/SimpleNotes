name: "${PROJECT_NAME}"

services:
    db:
        build:
            context: ./docker/db
            dockerfile: Dockerfile
        image: "${PROJECT_NAME}-${DB_CONTAINER_NAME}"
        container_name: "${PROJECT_NAME}-${DB_CONTAINER_NAME}"
        env_file:
            - .env
        ports:
            - "${LOCAL_DB_PORT}:3306"
        volumes:
            - db_data:/var/lib/mysql/
        restart: unless-stopped
        networks:
            - app_network
        healthcheck:
            test: ["CMD-SHELL", "mysqladmin ping -h localhost --silent"]
            interval: 5s
            timeout: 5s
            retries: 10
            start_period: 20s

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
            args:
                - DOCKER_BACKEND_PORT=${DOCKER_BACKEND_PORT}
        container_name: "${PROJECT_NAME}-${BACKEND_CONTAINER_NAME}"
        image: "${PROJECT_NAME}-${BACKEND_CONTAINER_NAME}"
        env_file:
            - ./backend/.env
            - .env
        depends_on:
            db:
                condition: service_healthy
        volumes:
            - ./backend:/app
        ports:
            - "${LOCAL_BACKEND_PORT}:${DOCKER_BACKEND_PORT}"
        restart: unless-stopped
        networks:
            - app_network
        healthcheck:
            test: ["CMD-SHELL", "curl -f ${BACKEND_HEALTH_CHECK_URL} || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 10
            start_period: 10s

    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile.dev
            args:
                - DOCKER_FRONTEND_PORT=${DOCKER_FRONTEND_PORT}
        container_name: "${PROJECT_NAME}-${FRONTEND_CONTAINER_NAME}"
        image: "${PROJECT_NAME}-${FRONTEND_CONTAINER_NAME}"
        env_file:
            - ./frontend/.env
            - .env
        depends_on:
            backend:
                condition: service_healthy
        volumes:
            - ./frontend:/app
            - /app/node_modules
        ports:
            - "${LOCAL_FRONTEND_PORT}:${DOCKER_FRONTEND_PORT}"
            - "3000:3000"
        restart: unless-stopped
        networks:
            - app_network
        healthcheck:
            test:
                ["CMD-SHELL", "curl -f ${FRONTEND_HEALTH_CHECK_URL} || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 10
            start_period: 10s

volumes:
    db_data:
        name: "${PROJECT_NAME}-${DB_CONTAINER_NAME}-data"

networks:
    app_network:
        name: "${PROJECT_NAME}-network"
        driver: bridge
